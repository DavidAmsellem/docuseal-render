#!/bin/bash

# DocuSeal Render Deployment Script
set -e

echo "ðŸš€ Iniciando deployment de DocuSeal en Render con Docker"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if git repo is clean
if [ -n "$(git status --porcelain)" ]; then
    print_warning "Hay cambios sin commitear en el repositorio."
    read -p "Â¿Deseas continuar? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_error "Deployment cancelado por el usuario."
        exit 1
    fi
fi

# Check if render.yaml exists
if [ ! -f "render.yaml" ]; then
    print_error "No se encontrÃ³ render.yaml. Â¿EstÃ¡s en el directorio correcto?"
    exit 1
fi

# Check if Dockerfile exists
if [ ! -f "Dockerfile" ]; then
    print_error "No se encontrÃ³ Dockerfile. Â¿EstÃ¡s en el directorio correcto?"
    exit 1
fi

print_status "Verificando configuraciÃ³n..."

# Validate Dockerfile
print_status "Validando Dockerfile..."
if ! docker build --no-cache -f Dockerfile . -t docuseal-test > /dev/null 2>&1; then
    print_error "Error al construir la imagen Docker localmente."
    print_error "Por favor, verifica tu Dockerfile y resuelve los errores antes de continuar."
    exit 1
fi
print_success "Dockerfile vÃ¡lido âœ“"

# Clean up test image
docker rmi docuseal-test > /dev/null 2>&1 || true

# Check git remote
if ! git remote get-url origin > /dev/null 2>&1; then
    print_error "No se encontrÃ³ remote origin. Configura tu repositorio Git primero."
    exit 1
fi

REPO_URL=$(git remote get-url origin)
print_status "Repositorio: $REPO_URL"

# Update render.yaml with correct repo URL if needed
if grep -q "tu-usuario" render.yaml; then
    print_warning "render.yaml contiene placeholder 'tu-usuario'"
    print_warning "Actualiza el repositorio en render.yaml manualmente antes de continuar."
    print_warning "Cambia: https://github.com/tu-usuario/docuseal.git"
    print_warning "Por tu URL real: $REPO_URL"
fi

# Commit and push changes
print_status "Preparando cÃ³digo para deployment..."

# Add all changes
git add .

# Check if there are changes to commit
if git diff --staged --quiet; then
    print_status "No hay cambios para commitear."
else
    # Commit changes
    COMMIT_MSG="Configure Docker deployment for Render - $(date '+%Y-%m-%d %H:%M:%S')"
    git commit -m "$COMMIT_MSG"
    print_success "Cambios commiteados: $COMMIT_MSG"
fi

# Push to origin
print_status "Subiendo cambios a GitHub..."
git push origin $(git branch --show-current)
print_success "CÃ³digo subido a repositorio âœ“"

echo
print_success "ðŸŽ‰ Â¡PreparaciÃ³n completa!"
echo
echo "PrÃ³ximos pasos:"
echo "1. Ve a https://render.com"
echo "2. Haz clic en 'New' â†’ 'Blueprint'"
echo "3. Conecta tu repositorio de GitHub"
echo "4. Render detectarÃ¡ automÃ¡ticamente el archivo render.yaml"
echo "5. Configura las variables de entorno si es necesario"
echo "6. Haz clic en 'Apply' para iniciar el deployment"
echo
echo "Variables de entorno que se configuran automÃ¡ticamente:"
echo "  âœ“ SECRET_KEY_BASE (generada automÃ¡ticamente)"
echo "  âœ“ DATABASE_URL (desde PostgreSQL service)"
echo "  âœ“ REDIS_URL (desde Redis service)"
echo "  âœ“ RAILS_ENV=production"
echo "  âœ“ RAILS_SERVE_STATIC_FILES=true"
echo
echo "Tu aplicaciÃ³n estarÃ¡ disponible en: https://docuseal.onrender.com"
echo "(o el nombre que hayas configurado)"
echo
print_status "Para monitorear el deployment, ve a Render Dashboard â†’ Logs"
